#!/bin/bash

# Prompt user for MySQL username
read -p "Enter MySQL username: " username

# Prompt user for MySQL password
read -s -p "Enter MySQL password: " password
echo # Print a new line for better formatting

# Prompt user for the database to be used
read -p "Enter the name of the database: " database

# Prompt user for the table name containing user details
read -p "Enter the name of the table containing user details: " table_name

# Prompt user for the name of the column containing usernames
read -p "Enter the name of the column containing usernames: " username_column

# Prompt user for the name of the column containing passwords
read -p "Enter the name of the column containing passwords: " password_column

# MySQL query to fetch all usernames and passwords
mysql_data=$(mysql -u"$username" -p"$password" -e "SELECT $username_column FROM $database.$table_name;" 2>/dev/null)

# Check if MySQL query was successful
if [ $? -eq 0 ]; then
    # Loop through each user fetched from the database
    while IFS= read -r user; do
        new_password=$(openssl rand -base64 12)
        # Generate bcrypt hash for the new password
        bcrypt_hash=$(php -r "echo password_hash('$new_password', PASSWORD_BCRYPT);")
        # Change password for the user
        mysql -u"$username" -p"$password" -e "USE $database; UPDATE $table_name SET $password_column = '$bcrypt_hash' WHERE $username_column = '$user';" 2>/dev/null
        # Store the new password hash in a file
        echo "User: $user, New Password: $new_password, Bcrypt Hash: $bcrypt_hash" >> mysql_passwords.txt
    done <<< "$mysql_data"
    echo "Passwords reset successfully for all users in the database. Details exported to mysql_passwords.txt"
else
    echo "Failed to fetch data from MySQL database. Please check your credentials, database, table, and column names."
fi
